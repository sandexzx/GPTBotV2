from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.operations import get_or_create_user, get_user_prompts, save_prompt, delete_prompt
from keyboards.keyboards import prompts_keyboard, prompt_actions_keyboard, main_menu_keyboard

router = Router()


class PromptStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_content = State()
    editing_prompt = State()


@router.callback_query(F.data == "prompts")
async def show_prompts(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_or_create_user(
        callback.from_user.id, 
        callback.from_user.username
    )
    
    prompts = get_user_prompts(user.id)
    
    if not prompts:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.\n\n"
            "–ü—Ä–æ–º–ø—Ç—ã - —ç—Ç–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –º–æ–¥–µ–ª–∏, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.",
            reply_markup=prompts_keyboard([])
        )
    else:
        prompts_data = [{"id": p.id, "name": p.name} for p in prompts]
        await callback.message.edit_text(
            "–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:",
            reply_markup=prompts_keyboard(prompts_data)
        )
    
    await callback.answer()


@router.callback_query(F.data == "create_prompt")
async def create_prompt_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.\n\n"
        "–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç? –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
    )
    await state.set_state(PromptStates.waiting_for_name)
    await callback.answer()


@router.message(PromptStates.waiting_for_name)
async def process_prompt_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    await state.update_data(prompt_name=message.text)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞:\n\n"
        "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —Ç–≤–æ–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –®–µ–∫—Å–ø–∏—Ä\" –∏–ª–∏ \"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python\"."
    )
    await state.set_state(PromptStates.waiting_for_content)


@router.message(PromptStates.waiting_for_content)
async def process_prompt_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    data = await state.get_data()
    prompt_name = data.get("prompt_name")
    
    user = get_or_create_user(message.from_user.id, message.from_user.username)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = save_prompt(user.id, prompt_name, message.text)
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–ø—Ç \"{prompt_name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ —á–∞—Ç–∞—Ö.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


@router.callback_query(F.data.startswith("prompt:"))
async def show_prompt_actions(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º"""
    prompt_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(prompt_id=prompt_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
    from database.operations import get_prompt_by_id
    prompt = get_prompt_by_id(prompt_id)
    
    if not prompt:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.",
            reply_markup=main_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    content_preview = prompt.content[:100] + "..." if len(prompt.content) > 100 else prompt.content
    
    await callback.message.edit_text(
        f"üìÑ –ü—Ä–æ–º–ø—Ç: \"{prompt.name}\"\n\n"
        f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{content_preview}\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=prompt_actions_keyboard(prompt_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_prompt:"))
async def delete_prompt_action(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_id = int(callback.data.split(":")[1])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
    success = delete_prompt(prompt_id)
    
    if success:
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç.",
            reply_markup=main_menu_keyboard()
        )
    
    await callback.answer()