from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.keyboards import main_menu_keyboard, models_keyboard
from config import ADMIN_IDS

router = Router()


class MainMenuStates(StatesGroup):
    waiting_for_action = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ OpenAI.\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_keyboard()
    )
    await state.set_state(MainMenuStates.waiting_for_action)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    help_text = (
        "ü§ñ *OpenAI Proxy Bot* ü§ñ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–¥–µ–ª—è–º–∏ OpenAI, "
        "—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã."
    )
    await message.answer(help_text, parse_mode="Markdown")


@router.callback_query(F.data == "about")
async def about_bot(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    about_text = (
        "ü§ñ *OpenAI Proxy Bot* ü§ñ\n\n"
        "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ OpenAI –∏ –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üí¨ –ß–∞—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ OpenAI\n"
        "‚Ä¢ üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤\n"
        "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @username"
    )
    await callback.message.edit_text(about_text, reply_markup=main_menu_keyboard(), parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu_keyboard()
    )
    await state.set_state(MainMenuStates.waiting_for_action)
    await callback.answer()


@router.callback_query(F.data == "new_chat")
async def new_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∑–∞ 1 –º–∏–ª–ª–∏–æ–Ω —Ç–æ–∫–µ–Ω–æ–≤.",
        reply_markup=models_keyboard()
    )
    await callback.answer()