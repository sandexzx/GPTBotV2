from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums.parse_mode import ParseMode

from database.operations import get_or_create_user, create_chat, add_message, get_chat_messages, get_chat_stats, get_prompt_by_id
from services.openai_service import send_message_to_openai
from services.token_counter import calculate_cost, format_stats
from keyboards.keyboards import chat_keyboard, models_keyboard, main_menu_keyboard

router = Router()


class ChatStates(StatesGroup):
    waiting_for_message = State()
    using_prompt = State()


@router.callback_query(F.data.startswith("model:"))
async def select_model(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    model = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(model=model)

     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    data = await state.get_data()
    selected_prompt_id = data.get("selected_prompt_id")

    print(f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ {model}, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç ID: {selected_prompt_id}")
    
    system_instruction = None
    if selected_prompt_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        prompt = get_prompt_by_id(selected_prompt_id)
        if prompt:
            print(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç {prompt.name} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞")
            system_instruction = prompt.content
        else:
            print(f"–ü—Ä–æ–º–ø—Ç —Å ID {selected_prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞")
            await state.update_data(selected_prompt_id=None)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    if system_instruction:
        await state.update_data(system_instruction=system_instruction)


    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from config import MODELS
    model_rates = MODELS.get(model, {"input": 0, "output": 0})
    await state.update_data(
        model_rate_input=model_rates["input"],
        model_rate_output=model_rates["output"]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_or_create_user(
        callback.from_user.id, 
        callback.from_user.username
    )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    chat_id = create_chat(user.id, model)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chat_id=chat_id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
    message_text = f"–ß–∞—Ç —Å –º–æ–¥–µ–ª—å—é {model} –Ω–∞—á–∞—Ç!"
    if selected_prompt_id:
        prompt = get_prompt_by_id(selected_prompt_id)
        message_text += f"\n\nüîÆ –ü—Ä–æ–º–ø—Ç \"{prompt.name}\" –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —á–∞—Ç—É."
    message_text += "\n\n–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–æ–¥–µ–ª–∏."
    
    
    await callback.message.edit_text(
        message_text,
        reply_markup=chat_keyboard() 
    )
    
    await state.set_state(ChatStates.waiting_for_message)
    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ChatStates:waiting_for_message")
    await callback.answer()


@router.message(ChatStates.waiting_for_message)
async def process_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    model = data.get("model")
    chat_id = data.get("chat_id")
    system_instruction = data.get("system_instruction")

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"–ú–æ–¥–µ–ª—å: {model}, Chat ID: {chat_id}")
    print(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {'–î–∞' if system_instruction else '–ù–µ—Ç'}")
    if system_instruction:
        print(f"–î–ª–∏–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat_id
    if not chat_id:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    from services.token_counter import get_token_count
    user_tokens = get_token_count(message.text, model)  # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    user_cost = user_tokens * (data.get("model_rate_input", 0) / 1_000_000)
    add_message(chat_id, "user", message.text, int(user_tokens), user_cost)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_messages = get_chat_messages(chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    response = await send_message_to_openai(
        model=model,
        input_text=message.text,
        messages=chat_messages,
        system_instruction=system_instruction,
        max_tokens=data.get("max_tokens", None)  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    )
    
    if response["success"]:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç API
        from database.operations import update_message_tokens
        update_message_tokens(
            chat_id=chat_id,
            is_user_message=True,
            new_tokens=response["input_tokens"],
            old_tokens=user_tokens,
            model=model
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
        add_message(
            chat_id,
            "assistant",
            response["output_text"],
            response["output_tokens"],
            response["output_cost"]
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        chat_stats = get_chat_stats(chat_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = format_stats(
            response["input_tokens"],
            response["output_tokens"],
            model,
            chat_stats["tokens_input"],
            chat_stats["tokens_output"]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —á–∞—Å—Ç—è–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ä–∫–µ—Ä—ã Markdown –≤ —Ç–µ–∫—Å—Ç–µ
        contains_markdown = any(marker in response['output_text'] for marker in ['```', '**', '__', '*', '_', '`'])
        parse_mode = ParseMode.MARKDOWN if contains_markdown else ParseMode.HTML
        await send_chunked_message(message, response['output_text'], parse_mode=parse_mode)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{stats_text}",
            reply_markup=chat_keyboard()
        )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response['error']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
            reply_markup=chat_keyboard()
        )


@router.callback_query(F.data.startswith("use_prompt:"))
async def use_prompt_in_chat(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —á–∞—Ç–µ, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É"""
    prompt_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
    from database.operations import get_prompt_by_id
    prompt = get_prompt_by_id(prompt_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —á–∞—Ç–µ
    if current_state is None or current_state != "ChatStates:waiting_for_message":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ prompts.py
        from handlers.prompts import redirect_use_prompt
        await redirect_use_prompt(callback, state)
        return
    
    if prompt:
        print(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç {prompt.name} –∫ —á–∞—Ç—É")
        await state.update_data(system_instruction=prompt.content)
        await callback.message.edit_text(
            f"üîÆ –ü—Ä–æ–º–ø—Ç \"{prompt.name}\" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–æ–º—É –ø—Ä–æ–º–ø—Ç—É.",
            reply_markup=chat_keyboard()
        )
    else:
        print(f"–ü—Ä–æ–º–ø—Ç —Å ID {prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.",
            reply_markup=chat_keyboard()
        )
    
    await callback.answer()

async def send_chunked_message(message: Message, text: str, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram"""
    MAX_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è Markdown
    def is_safe_split_for_markdown(text, position):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞–µ–º –ø–∞—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pairs = ["```", "**", "*", "__", "_", "`"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –º–∞—Ä–∫–µ—Ä–æ–≤
        for pair in pairs:
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            count_before = text[:position].count(pair)
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—á–µ—Ç–Ω–æ–µ - –∑–Ω–∞—á–∏—Ç, —Ä–∞–∑–¥–µ–ª—è–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if count_before % 2 != 0:
                return False
        
        return True
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if len(text) <= MAX_LENGTH:
        return await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
     
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown, –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
    if parse_mode == ParseMode.MARKDOWN:
        # –ú–∞—Ä–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã –≤ —Ç–æ–º –∂–µ —á–∞–Ω–∫–µ
        markdown_markers = ['```', '**', '__', '*', '_', '`']
        chunks = []
        start_idx = 0
        
        while start_idx < len(text):
            end_idx = min(start_idx + MAX_LENGTH, len(text))
            if end_idx < len(text):
                # –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                # –ò–¥–µ–º –Ω–∞–∑–∞–¥ –æ—Ç –∫–æ–Ω—Ü–∞ —á–∞–Ω–∫–∞, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                safe_end = end_idx
                while safe_end > start_idx + MAX_LENGTH // 2:
                    if text[safe_end] == '\n':
                        break
                    safe_end -= 1
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω–µ—Ü
                if safe_end <= start_idx + MAX_LENGTH // 2:
                    safe_end = end_idx
                
                end_idx = safe_end
                
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫
            chunks.append(text[start_idx:end_idx])
            start_idx = end_idx
            
        # –•–∞–∫: –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
        for marker in markdown_markers:
            if text.count(marker) % 2 != 0:
                parse_mode = None
                break
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        chunks = []
        for i in range(0, len(text), MAX_LENGTH):
            chunks.append(text[i:i + MAX_LENGTH])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    for chunk in chunks[:-1]:
        await message.answer(chunk, parse_mode=parse_mode)
    
    # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    return await message.answer(chunks[-1], reply_markup=reply_markup, parse_mode=parse_mode)

@router.callback_query(F.data.startswith("set_max_tokens:"))
async def set_max_tokens(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    max_tokens = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(max_tokens=max_tokens)
    
    await callback.message.edit_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –≤ {max_tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:",
        reply_markup=models_keyboard()
    )
    
    await callback.answer()