from typing import Dict, List, Optional
import asyncio
from aiogram import Bot
from aiogram.types import Message
from datetime import datetime, timedelta

class QueueManager:
    def __init__(self):
        self.queue: List[Dict] = []
        self.current_request: Optional[Dict] = None
        self.lock = asyncio.Lock()
        self.processing = False
        self.last_notification_time: Dict[int, datetime] = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    async def add_to_queue(self, message: Message) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏"""
        async with self.lock:
            position = len(self.queue) + 1
            self.queue.append({
                'user_id': message.from_user.id,
                'message': message,
                'chat_id': message.chat.id,
                'bot': message.bot,
                'position': position,
                'timestamp': datetime.now(),
                'last_notification': datetime.now()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            })
            return position

    async def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.processing:
            return
        
        self.processing = True
        try:
            while self.queue:
                async with self.lock:
                    if not self.queue:
                        break
                    self.current_request = self.queue.pop(0)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
                await self.current_request['bot'].send_message(
                    self.current_request['chat_id'],
                    "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                yield self.current_request
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await self.current_request['bot'].send_message(
                    self.current_request['chat_id'],
                    "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                )
                
                self.current_request = None
        finally:
            self.processing = False

    async def get_queue_position(self, user_id: int) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏"""
        async with self.lock:
            for i, request in enumerate(self.queue):
                if request['user_id'] == user_id:
                    return i + 1
            return None

    def is_user_in_queue(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏"""
        return any(request['user_id'] == user_id for request in self.queue)

    async def remove_from_queue(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        async with self.lock:
            for i, request in enumerate(self.queue):
                if request['user_id'] == user_id:
                    self.queue.pop(i)
                    return True
            return False

    async def send_queue_updates(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏"""
        while True:
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            async with self.lock:
                current_time = datetime.now()
                for request in self.queue:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    if (current_time - request['last_notification']) > timedelta(minutes=1):
                        position = self.queue.index(request) + 1
                        await request['bot'].send_message(
                            request['chat_id'],
                            f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {position}\n"
                            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {position * 2} –º–∏–Ω—É—Ç"
                        )
                        request['last_notification'] = current_time

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
queue_manager = QueueManager()

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏
async def start_queue_updates():
    await queue_manager.send_queue_updates() 